"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _fs = _interopRequireDefault(require("fs"));
var _path = _interopRequireDefault(require("path"));
var _base = require("./base");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
/**
 * Copyright (c) Microsoft Corporation.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

class MarkdownReporter extends _base.BaseReporter {
  constructor(options) {
    super();
    this._options = void 0;
    this._options = options;
  }
  printsToStdio() {
    return false;
  }
  async onEnd(result) {
    await super.onEnd(result);
    const summary = this.generateSummary();
    const lines = [];
    lines.push(`:x: <b>failed: ${summary.unexpected.length}</b>`);
    this._printTestList(summary.unexpected, lines);
    if (summary.flaky.length) {
      lines.push(`:warning: <b>flaky: ${summary.flaky.length}</b>`);
      this._printTestList(summary.flaky, lines);
    }
    if (summary.interrupted.length) {
      lines.push(`:warning: <b>interrupted: ${summary.interrupted.length}</b>`);
      this._printTestList(summary.interrupted, lines);
    }
    if (summary.skipped) {
      lines.push(`:ballot_box_with_check: <b>skipped: ${summary.skipped}</b>`);
      lines.push(``);
    }
    lines.push(`:white_check_mark: <b>passed: ${summary.expected}</b>`);
    lines.push(``);
    const reportFile = _path.default.resolve(this._options.configDir, this._options.outputFile || 'report.md');
    await _fs.default.promises.mkdir(_path.default.dirname(reportFile), {
      recursive: true
    });
    await _fs.default.promises.writeFile(reportFile, lines.join('\n'));
  }
  _printTestList(tests, lines) {
    for (const test of tests) lines.push(` - ${(0, _base.formatTestTitle)(this.config, test)}`);
    lines.push(``);
  }
}
var _default = MarkdownReporter;
exports.default = _default;